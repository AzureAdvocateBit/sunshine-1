# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'Ubuntu-16.04'

variables:
  buildConfiguration: 'Release'
  azureResourceNamePrefix: sunshine
  azureSubscription: 'Azure RG - shared'
  azureResourceLocation: 'Australia East'

steps:
- script: dotnet build --configuration $(buildConfiguration)
  displayName: 'dotnet build $(buildConfiguration)'

- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    arguments: '--configuration $(BuildConfiguration)'
    publishWebProjects: false
    zipAfterPublish: false
  displayName: dotnet publish

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.SourcesDirectory)/src/Sunshine.Downloader/bin/$(BuildConfiguration)/netcoreapp2.2/publish'
    includeRootFolder: false
    archiveFile: '$(Build.ArtifactStagingDirectory)/Sunshine.Downloader-$(Build.BuildId).zip'
  displayName: Archive Downloader

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.SourcesDirectory)/src/Sunshine.Functions/bin/$(BuildConfiguration)/netcoreapp2.1/publish'
    includeRootFolder: false
    archiveFile: '$(Build.ArtifactStagingDirectory)/Sunshine.Functions-$(Build.BuildId).zip'
  displayName: Archive Functions

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.SourcesDirectory)/src/Sunshine.MockApi/bin/$(BuildConfiguration)/netcoreapp2.2/publish'
    includeRootFolder: false
    archiveFile: '$(Build.ArtifactStagingDirectory)/Sunshine.MockApi-$(Build.BuildId).zip'
  displayName: Archive MockApi

- task: PublishBuildArtifacts@1

- task: AzureResourceGroupDeployment@2
  displayName: 'Azure Deployment:Create ACR'
  inputs:
    azureSubscription: '$(azureSubscription)'
    resourceGroupName: '$(azureResourceNamePrefix)-shared'
    location: '$(azureResourceLocation)'
    templateLocation: Linked artifact
    csmFile: '$(Build.SourcesDirectory)/.build/acr.json'
    overrideParameters: '-name $(azureResourceNamePrefix) -registrySku "Basic" -location "$(azureResourceLocation)"'
    deploymentOutputs: ResourceGroupDeploymentOutputs

- task: PowerShell@2
  displayName: Convert ARM output to environment variables
  inputs:
    targetType: filePath
    script: '$(Build.SourcesDirectory)/.build/Set-ResourceManagerOutput.ps1'
    arguments: -ResourceManagerOutput '$(ResourceGroupDeploymentOutputs)'

- task: CopyFiles@2
  displayName: 'Prepare files for IoT Edge build'
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)/src/Sunshine.Downloader/bin/$(BuildConfiguration)/netcoreapp2.2/publish'
    targetFolder: '$(Build.SourcesDirectory)/.build/Sunshine.Downloader/app'

- task: AzureIoTEdge@2
  displayName: 'Azure IoT Edge - Build module images'
  inputs:
    templateFilePath: '$(Build.SourcesDirectory)/.build/deployment.template.json'
    defaultPlatform: amd64

- task: AzureIoTEdge@2
  displayName: 'Azure IoT Edge - Push module images'
  inputs:
    action: 'Push module images'
    azureSubscriptionEndpoint: '$(azureSubscription)'
    azureContainerRegistry: '{"loginServer":"$(CONTAINER_REGISTRY_SERVER)", "id" : "/subscriptions/$(SUBSCRIPTION_ID)/resourceGroups/$(azureResourceNamePrefix)-shared/providers/Microsoft.ContainerRegistry/registries/$(CONTAINER_REGISTRY_SERVER_NAME)"}'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: IoT Edge Deployment'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/deployment.amd64.json'
    ArtifactName: Drop

