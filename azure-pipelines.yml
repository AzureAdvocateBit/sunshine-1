trigger:
- master

pr: none

variables:
  azureSubscription: 'Sunshine Service Connection'
  azureResourceNamePrefix: sunshine
  buildConfiguration: 'Release'
  azureResourceLocation: 'Australia East'

jobs:
  - job: PrepareArtifactStorage
    displayName: Setup Artifact Storage Azure Resources
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    - task: AzureResourceGroupDeployment@2
      displayName: 'Azure Deployment: Artifact Storage'
      inputs:
        azureSubscription: '$(azureSubscription)'
        resourceGroupName: '$(azureResourceNamePrefix)-shared'
        location: '$(azureResourceLocation)'
        templateLocation: Linked artifact
        csmFile: '$(Build.SourcesDirectory)/.build/artifact-storage.json'
        overrideParameters: '-name $(azureResourceNamePrefix) -location "$(azureResourceLocation)"'
        deploymentOutputs: ResourceGroupDeploymentOutputs

    - task: PowerShell@2
      displayName: Convert ARM output to environment variables
      name: artifactVars
      inputs:
        targetType: filePath
        filePath: '$(Build.SourcesDirectory)/.build/Set-ArtifactStorageResourceManagerOutput.ps1'
        arguments: -ResourceManagerOutput '$(ResourceGroupDeploymentOutputs)'

  - job: Build
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    - script: dotnet build --configuration $(buildConfiguration)
      displayName: 'dotnet build $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        arguments: '--configuration $(BuildConfiguration)'
        publishWebProjects: false
        zipAfterPublish: false
      displayName: dotnet publish

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/src/Sunshine.Downloader/bin/$(BuildConfiguration)/netcoreapp2.2/publish'
        includeRootFolder: false
        archiveFile: '$(Build.ArtifactStagingDirectory)/Sunshine.Downloader-$(Build.BuildId).zip'
      displayName: Archive Downloader

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/src/Sunshine.Functions/bin/$(BuildConfiguration)/netcoreapp2.1/publish'
        includeRootFolder: false
        archiveFile: '$(Build.ArtifactStagingDirectory)/Sunshine.Functions-$(Build.BuildId).zip'
      displayName: Archive Functions

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/src/Sunshine.MockApi/bin/$(BuildConfiguration)/netcoreapp2.2/publish'
        includeRootFolder: false
        archiveFile: '$(Build.ArtifactStagingDirectory)/Sunshine.MockApi-$(Build.BuildId).zip'
      displayName: Archive MockApi

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      continueOnError: true
      inputs:
        artifactName: Apps

  - job: PublishReleaseScripts
    displayName: Publish Release stage artifacts
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    - task: CopyFiles@2
      displayName: Copy Release Scripts
      inputs:
        contents: $(Build.SourcesDirectory)/.release/**
        targetFolder: $(Build.ArtifactStagingDirectory)
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      continueOnError: true
      inputs:
        artifactName: arm

  - job: PrepareAzureACR
    displayName: Prepare Azure ACR
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    - task: AzureResourceGroupDeployment@2
      displayName: 'Azure Deployment:Create ACR'
      inputs:
        azureSubscription: '$(azureSubscription)'
        resourceGroupName: '$(azureResourceNamePrefix)-shared'
        location: '$(azureResourceLocation)'
        templateLocation: Linked artifact
        csmFile: '$(Build.SourcesDirectory)/.build/acr.json'
        overrideParameters: '-name $(azureResourceNamePrefix) -registrySku "Basic" -location "$(azureResourceLocation)"'
        deploymentOutputs: ResourceGroupDeploymentOutputs

    - task: PowerShell@2
      displayName: Convert ARM output to environment variables
      name: armVar
      inputs:
        targetType: filePath
        filePath: '$(Build.SourcesDirectory)/.build/Set-BuildResourceManagerOutput.ps1'
        arguments: -ResourceManagerOutput '$(ResourceGroupDeploymentOutputs)'

  - template: .build/template.iot-edge.yml
    parameters:
      name: BuildImages_amd64
      CONTAINER_REGISTRY_SERVER: $[dependencies.PrepareAzureACR.outputs['armVar.CONTAINER_REGISTRY_SERVER']]
      SUBSCRIPTION_ID: $[dependencies.PrepareAzureACR.outputs['armVar.SUBSCRIPTION_ID']]
      CONTAINER_REGISTRY_SERVER_NAME: $[dependencies.PrepareAzureACR.outputs['armVar.CONTAINER_REGISTRY_SERVER_NAME']]
      ARTIFACT_STORAGE_NAME: $[dependencies.PrepareArtifactStorage.outputs['artifactVars.ARTIFACT_STORAGE_NAME']]
      defaultPlatform: amd64
      azureResourceNamePrefix: $(azureResourceNamePrefix)
      azureSubscription: $(azureSubscription)

  - template: .build/template.iot-edge.yml
    parameters:
      name: BuildImages_arm32v7
      CONTAINER_REGISTRY_SERVER: $[dependencies.PrepareAzureACR.outputs['armVar.CONTAINER_REGISTRY_SERVER']]
      SUBSCRIPTION_ID: $[dependencies.PrepareAzureACR.outputs['armVar.SUBSCRIPTION_ID']]
      CONTAINER_REGISTRY_SERVER_NAME: $[dependencies.PrepareAzureACR.outputs['armVar.CONTAINER_REGISTRY_SERVER_NAME']]
      ARTIFACT_STORAGE_NAME: $[dependencies.PrepareArtifactStorage.outputs['artifactVars.ARTIFACT_STORAGE_NAME']]
      defaultPlatform: arm32v7
      azureResourceNamePrefix: $(azureResourceNamePrefix)
      azureSubscription: $(azureSubscription)

  - template: .build/template.iot-edge.yml
    parameters:
      name: BuildImages_amd64_debug
      CONTAINER_REGISTRY_SERVER: $[dependencies.PrepareAzureACR.outputs['armVar.CONTAINER_REGISTRY_SERVER']]
      SUBSCRIPTION_ID: $[dependencies.PrepareAzureACR.outputs['armVar.SUBSCRIPTION_ID']]
      CONTAINER_REGISTRY_SERVER_NAME: $[dependencies.PrepareAzureACR.outputs['armVar.CONTAINER_REGISTRY_SERVER_NAME']]
      ARTIFACT_STORAGE_NAME: $[dependencies.PrepareArtifactStorage.outputs['artifactVars.ARTIFACT_STORAGE_NAME']]
      defaultPlatform: amd64.debug
      azureResourceNamePrefix: $(azureResourceNamePrefix)
      azureSubscription: $(azureSubscription)

  - job: PrepareAzureIoTEnvrionment
    displayName: Prepare Azure IoT Environment
    pool:
      vmImage: 'Ubuntu-16.04'
    variables:
      resourceGroupName: sunshine-prod
    steps:
    - task: AzureResourceGroupDeployment@2
      displayName: 'Azure Deployment:Create Or Update Resource Group action on sunshine-prod'
      inputs:
        azureSubscription: '$(azureSubscription)'
        resourceGroupName: '$(azureResourceNamePrefix)-prod'
        location: '$(azureResourceLocation)'
        templateLocation: Linked artifact
        csmFile: '$(System.DefaultWorkingDirectory)/.build/azure-environment.json'
        overrideParameters: '-name $(azureResourceNamePrefix) -location "$(azureResourceLocation)"'
        deploymentOutputs: ResourceGroupDeploymentOutputs
    - task: PowerShell@2
      displayName: Publish ARM outputs for asset
      inputs:
        targetType: filePath
        filePath: '$(Build.SourcesDirectory)/.build/Set-ReleaseResourceManagerOutput.ps1'
        arguments: -ResourceManagerOutput '$(ResourceGroupDeploymentOutputs)'
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      continueOnError: true
      inputs:
        artifactName: arm