parameters:
  name: ''
  ARTIFACT_STORAGE_NAME: ''
  CONTAINER_REGISTRY_SERVER: ''
  SUBSCRIPTION_ID: ''
  CONTAINER_REGISTRY_SERVER_NAME: ''
  defaultPlatform: ''
  azureResourceNamePrefix: ''
  azureSubscription: ''

jobs:
- job: ${{ parameters.name }}
  displayName: Build Images for IoT Edge (${{ parameters.defaultPlatform }})
  dependsOn:
    - PrepareArtifactStorage
    - PrepareAzureACR
    - Build
  pool:
    vmImage: 'Ubuntu-16.04'
  variables:
    CONTAINER_REGISTRY_SERVER: ${{ parameters.CONTAINER_REGISTRY_SERVER }}
    SUBSCRIPTION_ID: ${{ parameters.SUBSCRIPTION_ID }}
    CONTAINER_REGISTRY_SERVER_NAME: ${{ parameters.CONTAINER_REGISTRY_SERVER_NAME }}
  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      artifactName: Apps
      downloadPath: $(System.DefaultWorkingDirectory)

  - task: ExtractFiles@1
    displayName: Unpack Build Artifact
    inputs:
      destinationFolder: '$(Build.SourcesDirectory)/src/Sunshine.Downloader/bin/$(BuildConfiguration)/netcoreapp2.2/publish'
      archiveFilePatterns: $(System.DefaultWorkingDirectory)/Apps/Sunshine.Downloader-$(Build.BuildId).zip

  - task: AzureIoTEdge@2
    displayName: Azure IoT Edge - Build module images (${{ parameters.defaultPlatform }})
    inputs:
      templateFilePath: '$(Build.SourcesDirectory)/.build/deployment.template.json'
      defaultPlatform: ${{ parameters.defaultPlatform }}

  - task: AzureIoTEdge@2
    displayName: Azure IoT Edge - Push module images (${{ parameters.defaultPlatform }})
    inputs:
      action: 'Push module images'
      templateFilePath: '$(Build.SourcesDirectory)/.build/deployment.template.json'
      azureSubscriptionEndpoint: ${{ parameters.azureSubscription }}
      azureContainerRegistry: '{"loginServer":"$(CONTAINER_REGISTRY_SERVER)", "id" : "$(SUBSCRIPTION_ID)/resourceGroups/${{ parameters.azureResourceNamePrefix }}-shared/providers/Microsoft.ContainerRegistry/registries/$(CONTAINER_REGISTRY_SERVER_NAME)"}'
      defaultPlatform: ${{ parameters.defaultPlatform }}

  - task: AzureCLI@1
    displayName: Upload deployment artifact
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      scriptLocation: inlineScript
      arguments: ${{ parameters.ARTIFACT_STORAGE_NAME }} $(Build.ArtifactStagingDirectory) ${{ parameters.defaultPlatform }} $(Build.BuildId)
      inlineScript: |
        account_name=$0
        key=$(az storage account keys list --account-name $account_name | jq '.[0].value')
        exists=$(az storage container exists --account-name $account_name --name artifacts --account-key $key | jq '.exists')
        if [ "$exists" == false ]; then
                az storage container create --name artifacts --account-name $account_name --account-key $key
        fi
        az storage blob upload --container-name artifacts --file $1/deployment.$2.json --name $3/deployment.$2.json --account-name $account_name --account-key $key
